# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
#https://docs.microsoft.com/ru-ru/azure/devops/pipelines/process/templates?view=azure-devops
# YAML file in the main branch
schedules:
- cron: "0 0 * * *"
  displayName: Scheduled build
  branches:
    include:
    - main

variables:
  - template: azure-pipelines-vars.yml  

parameters:
  - name: doPublish
    default: false
    type: boolean
  - name: doAnalyze
    default: true
    type: boolean
    
trigger:
- main
stages:
# Start CI
- stage: CIBuild  # name of the stage, A-Z, a-z, 0-9, and underscore
  displayName: CI_Build  # friendly name to display in the UI 
  variables:
    buildConfiguration: 'Release'

# jobs CI
  jobs: 

 # Build
  - job: Build
    variables:
        NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

    pool:  
      vmImage: windows-2022 #https://docs.microsoft.com/ru-ru/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml
    steps:
    - checkout: self
  # Get pipeline cache    

    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/**/packages.lock.json'
        restoreKeys: |
          nuget | "$(Agent.OS)"
          nuget
        path: $(NUGET_PACKAGES)
        cacheHitVar: CACHE_RESTORED
      displayName: Cache NuGet packages

  # SonarCloudPrepare
    - task: SonarCloudPrepare@1
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Prepare
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'mihsta'
        scannerMode: 'MSBuild'
        projectKey: 'mihsta_devops-diplom'

  # Build solution .NET CORE
      
    - task: DotNetCoreCLI@2
      condition: ne(variables.CACHE_RESTORED, 'true')
      displayName: dotnet build
      inputs:
        command: 'build'
        projects: |
          **/*.sln
        arguments: '--configuration $(buildConfiguration)'

  #  Run tests and auto publish test results.
    - task: DotNetCoreCLI@2
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: dotnet test
      inputs:
        command: 'test'
        workingDirectory: diplomapp
        projects: |
          **/*.sln
        arguments: '/p:CollectCoverage=true'

  #  SonarCloudAnalyze
    - task: SonarCloudAnalyze@1
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Analyze
    - task: SonarCloudPublish@1
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Publish
      inputs:
        pollingTimeoutSec: '300'
    - task: sonarcloud-buildbreaker@2
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Breaker
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'mihsta'

 # Docker Build
  - job: DockerBuildAndPushBackend
    pool:  
      vmImage: Ubuntu 20.04
    steps:
      - checkout: self
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce' 
      - bash: |
          short_hash=`git rev-parse --short=7 HEAD`
          echo ""
          echo "Full git hash:  $(Build.SourceVersion)"
          echo "Short git hash: $short_hash"
          echo ""
          ## Fail step if full hash does not start with short hash
          if [[ $(Build.SourceVersion) != $short_hash* ]]; then
            echo "--> Hashes do not match! Aborting."
            exit 1
          fi
          echo "--> Hashes match. Storing short hash for subsequent steps."
          ## Store variable for subsequent steps
          echo "##vso[task.setvariable variable=short_hash]$short_hash"        
        displayName: Get short git hash

      - task: Docker@2
        inputs:
          containerRegistry: 'docker_hub'
          repository: 'mihailsta/diplomapp-backend'
          command: 'build'
          Dockerfile: 'Dockerfile.backend'
          tags: |
            $(frontendtag)
            $(short_hash)
            latest         
          addPipelineData: false
          addBaseImageData: false
      - task: Docker@2
        inputs:
          containerRegistry: 'docker_hub'
          repository: 'mihailsta/diplomapp-backend'
          command: 'push'
          Dockerfile: 'Dockerfile.backend'
          tags: |
            $(backendtag)
            $(short_hash)
            latest         
          addPipelineData: false
          addBaseImageData: false

      - task: Docker@2
        inputs:
          containerRegistry: 'docker_hub'
          repository: 'mihailsta/diplomapp-frontend'
          command: 'build'
          Dockerfile: 'Dockerfile.frontend'
          tags: |
            $(frontendtag)
            $(short_hash)
            latest
          addPipelineData: false
          addBaseImageData: false
          
      - task: Docker@2
        inputs:
          containerRegistry: 'docker_hub'
          repository: 'mihailsta/diplomapp-frontend'
          command: 'push'
          Dockerfile: 'Dockerfile.frontend'
          tags: |
            $(backendtag)
            $(short_hash)
            latest
          addPipelineData: false
          addBaseImageData: false