# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.

# YAML file in the main branch
parameters:
  - name: doAnalyze
    default: true
    type: boolean
    
trigger:
- main
stages:
# Start CI
- stage: CIBuild  # name of the stage, A-Z, a-z, 0-9, and underscore
  displayName: CI_Build  # friendly name to display in the UI 
  variables:
    buildConfiguration: 'Release'

# jobs CI
  jobs: 

 # Build
  - job: Build
    variables:
        NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

    pool:  
      vmImage: windows-2022 #https://docs.microsoft.com/ru-ru/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml
    steps:
    - checkout: self
  # Get pipeline cache    

    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/**/packages.lock.json'
        restoreKeys: |
          nuget | "$(Agent.OS)"
          nuget
        path: $(NUGET_PACKAGES)
        cacheHitVar: CACHE_RESTORED
      displayName: Cache NuGet packages

  # SonarCloudPrepare
    - task: SonarCloudPrepare@1
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Prepare
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'mihsta'
        scannerMode: 'MSBuild'
        projectKey: 'mihsta_devops-diplom'

  # Build solution .NET CORE
      
    - task: DotNetCoreCLI@2
      condition: ne(variables.CACHE_RESTORED, 'true')
      displayName: dotnet build
      inputs:
        command: 'build'
        projects: |
          **/*.sln
        arguments: '--configuration $(buildConfiguration)'

  #  Run tests and auto publish test results.
    - task: DotNetCoreCLI@2
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: dotnet test
      inputs:
        command: 'test'
        workingDirectory: diplomapp
        projects: |
          **/*.sln
        arguments: '/p:CollectCoverage=true'

  #  SonarCloudAnalyze
    - task: SonarCloudAnalyze@1
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Analyze
    - task: SonarCloudPublish@1
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Publish
      inputs:
        pollingTimeoutSec: '300'
    - task: sonarcloud-buildbreaker@2
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Breaker
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'mihsta'