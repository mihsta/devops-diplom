NAMESPACE=ingress-basic

$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh

helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update

helm install ingress-nginx ingress-nginx/ingress-nginx --create-namespace --namespace $NAMESPACE 

https://cert-manager.io/docs/installation/
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.6.1/cert-manager.yaml


az network public-ip list --query "[?ipAddress!=null]|[?contains(ipAddress, '<YOUR-IP-ADDRESS>')].[id]" --output tsvaz

az account set --subscription "ProductionSubscription"
az network public-ip list -o table

watch curl http://stage-app.asis.org.ru/
watch curl http://stage-appback.asis.org.ru/weatherforecast
watch curl http://appback.asis.org.ru/weatherforecast
watch curl http://app.asis.org.ru/weatherforecast

https://www.endycahyono.com/article/hosting-blazor-webassembly-in-nginx
https://dev.to/___bn___/serve-a-single-page-application-along-with-its-backend-api-thanks-to-nginx-reverse-proxy-2h5c

https://docs.microsoft.com/ru-ru/azure/aks/ingress-basic
https://kubernetes.github.io/ingress-nginx/deploy/

https://docs.microsoft.com/en-us/azure/aks/ingress-static-ip





https://docs.microsoft.com/en-us/azure/aks/ingress-tls?tabs=azure-cli


#set prod context az cli
export MYACR=azacregistryhawk && export CLUSTER_NAME="funny-hawk-aks" && export RESOURCE_GROUP="funny-hawk-rg" && export SUBSCRIPTION="ProductionSubscription" && az account set --subscription $SUBSCRIPTION  && echo && echo Subscription: $SUBSCRIPTION && echo Clustername: $CLUSTER_NAME && echo Resource group: $RESOURCE_GROUP && echo

# Run the following line to create an Azure Container Registry if you do not already have one
az acr create -n $MYACR -g $RESOURCE_GROUP --sku basic

#connect aks to acr
az aks update -n $CLUSTER_NAME -g $RESOURCE_GROUP --attach-acr $MYACR

#create dns zone
az network dns zone create -g DefaultResourceGroup-WEU -n asis.org.ru


REGISTRY_NAME=$MYACR
RESOURCE_GROUP="funny-hawk-rg"
#https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
SOURCE_REGISTRY=k8s.gcr.io
CONTROLLER_IMAGE=ingress-nginx/controller
CONTROLLER_TAG=v1.1.0
PATCH_IMAGE=ingress-nginx/kube-webhook-certgen
PATCH_TAG=v1.1.1
DEFAULTBACKEND_IMAGE=defaultbackend-amd64
DEFAULTBACKEND_TAG=1.5

#https://github.com/jetstack/cert-manager/releases
CERT_MANAGER_REGISTRY=quay.io
CERT_MANAGER_TAG=v1.6.1
CERT_MANAGER_IMAGE_CONTROLLER=jetstack/cert-manager-controller
CERT_MANAGER_IMAGE_WEBHOOK=jetstack/cert-manager-webhook
CERT_MANAGER_IMAGE_CAINJECTOR=jetstack/cert-manager-cainjector
ACR_URL=azacregistryhawk.azurecr.io


az acr import --name $REGISTRY_NAME --source $SOURCE_REGISTRY/$CONTROLLER_IMAGE:$CONTROLLER_TAG --image $CONTROLLER_IMAGE:$CONTROLLER_TAG --no-wait
az acr import --name $REGISTRY_NAME --source $SOURCE_REGISTRY/$PATCH_IMAGE:$PATCH_TAG --image $PATCH_IMAGE:$PATCH_TAG --no-wait
az acr import --name $REGISTRY_NAME --source $SOURCE_REGISTRY/$DEFAULTBACKEND_IMAGE:$DEFAULTBACKEND_TAG --image $DEFAULTBACKEND_IMAGE:$DEFAULTBACKEND_TAG --no-wait
az acr import --name $REGISTRY_NAME --source $CERT_MANAGER_REGISTRY/$CERT_MANAGER_IMAGE_CONTROLLER:$CERT_MANAGER_TAG --image $CERT_MANAGER_IMAGE_CONTROLLER:$CERT_MANAGER_TAG --no-wait
az acr import --name $REGISTRY_NAME --source $CERT_MANAGER_REGISTRY/$CERT_MANAGER_IMAGE_WEBHOOK:$CERT_MANAGER_TAG --image $CERT_MANAGER_IMAGE_WEBHOOK:$CERT_MANAGER_TAG --no-wait
az acr import --name $REGISTRY_NAME --source $CERT_MANAGER_REGISTRY/$CERT_MANAGER_IMAGE_CAINJECTOR:$CERT_MANAGER_TAG --image $CERT_MANAGER_IMAGE_CAINJECTOR:$CERT_MANAGER_TAG --no-wait

az acr repository list --name azacregistryhawk --resource-group $RESOURCE_GROUP --output table

#https://docs.microsoft.com/en-us/azure/container-registry/container-registry-helm-repos


# Add the ingress-nginx repository
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

# Set variable for ACR location to use for pulling images
ACR_URL=azacregistryhawk.azurecr.io

# Use Helm to deploy an NGINX ingress controller
helm install nginx-ingress ingress-nginx/ingress-nginx \
    --namespace ingress-basic --create-namespace \
    --set controller.replicaCount=2 \
    --set controller.nodeSelector."kubernetes\.io/os"=linux \
    --set controller.image.registry=$ACR_URL \
    --set controller.image.image=$CONTROLLER_IMAGE \
    --set controller.image.tag=$CONTROLLER_TAG \
    --set controller.image.digest="" \
    --set controller.admissionWebhooks.patch.nodeSelector."kubernetes\.io/os"=linux \
    --set controller.admissionWebhooks.patch.image.registry=$ACR_URL \
    --set controller.admissionWebhooks.patch.image.image=$PATCH_IMAGE \
    --set controller.admissionWebhooks.patch.image.tag=$PATCH_TAG \
    --set controller.admissionWebhooks.patch.image.digest="" \
    --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux \
    --set defaultBackend.image.registry=$ACR_URL \
    --set defaultBackend.image.image=$DEFAULTBACKEND_IMAGE \
    --set defaultBackend.image.tag=$DEFAULTBACKEND_TAG \
    --set defaultBackend.image.digest=""

#get the public IP address
kubectl --namespace ingress-basic get services -o wide -w nginx-ingress-ingress-nginx-controller

#Add an A record to your DNS zone
az network dns record-set a add-record \
    --resource-group DefaultResourceGroup-WEU \
    --zone-name asis.org.ru \
    --record-set-name "*" \
    --ipv4-address 20.82.67.140

az network dns record-set a add-record \
    --resource-group DefaultResourceGroup-WEU \
    --zone-name asis.org.ru \
    --record-set-name "@" \
    --ipv4-address 20.82.67.140
    
#curl bysy box
kubectl run curl-test --image=radial/busyboxplus:curl -i --tty --rm 

kubectl run curl-test --image=radial/busyboxplus:curl -i --tty --rm -n diplomapp-staging

# Label the ingress-basic namespace to disable resource validation
kubectl label namespace ingress-basic cert-manager.io/disable-validation=true

# Add the Jetstack Helm repository
helm repo add jetstack https://charts.jetstack.io

# Update your local Helm chart repository cache
helm repo update

# Install the cert-manager Helm chart
helm install cert-manager jetstack/cert-manager \
  --replace \
  --namespace ingress-basic \
  --version $CERT_MANAGER_TAG \
  --set installCRDs=true \
  --set nodeSelector."kubernetes\.io/os"=linux \
  --set image.repository=$ACR_URL/$CERT_MANAGER_IMAGE_CONTROLLER \
  --set image.tag=$CERT_MANAGER_TAG \
  --set webhook.image.repository=$ACR_URL/$CERT_MANAGER_IMAGE_WEBHOOK \
  --set webhook.image.tag=$CERT_MANAGER_TAG \
  --set cainjector.image.repository=$ACR_URL/$CERT_MANAGER_IMAGE_CAINJECTOR \
  --set cainjector.image.tag=$CERT_MANAGER_TAG

#https://cert-manager.io/docs/configuration/

#https://letsencrypt.org/docs/staging-environment/
#change the mail
kubectl apply -f cluster-issuer.yaml


kubectl apply -f aks-hello-world-one.yaml --namespace ingress-basic
kubectl apply -f aks-hello-world-two.yaml --namespace ingress-basic
kubectl apply -f aks-hello-world-ingress.yaml --namespace ingress-basic

kubectl get certifi'cate --namespace ingress-basic
helm list --namespace ingress-basic

https://hello-world-ingress.asis.org.ru
https://hello-world-ingress.asis.org.ru/hello-world-two
https://hello-world-ingress.asis.org.ru/static


kubectl apply -f https://download.newrelic.com/install/kubernetes/pixie/latest/px.dev_viziers.yaml && \
kubectl apply -f https://download.newrelic.com/install/kubernetes/pixie/latest/olm_crd.yaml && \
helm repo add newrelic https://helm-charts.newrelic.com && helm repo update && \
kubectl create namespace newrelic ; helm upgrade --install newrelic-bundle newrelic/nri-bundle \
 --set global.licenseKey=eu01xx85e2642d964320e9f2da10158665e0NRAL \
 --set global.cluster=aks-diplomapp \
 --namespace=newrelic \
 --set newrelic-infrastructure.privileged=true \
 --set global.lowDataMode=true \
 --set ksm.enabled=true \
 --set prometheus.enabled=true \
 --set kubeEvents.enabled=true \
 --set logging.enabled=true \
 --set newrelic-pixie.enabled=true \
 --set newrelic-pixie.apiKey=px-api-248fb9db-0f05-4576-a42c-8453955028b4 \
 --set pixie-chart.enabled=true \
 --set pixie-chart.deployKey=px-dep-1aede3d0-31a3-4695-bb5a-6a2e417127b4 \
 --set pixie-chart.clusterName=aks-diplomapp 

 https://www.yogihosting.com/kubernetes-ingress-aspnet-core/


 https://ru.werf.io/documentation/v1.1/guides/github_ci_cd_integration.html

 https://github.com/werf/trdl/blob/f502e0881f92ba48a392d839a7a72ddf82962bad/docs/.helm/templates/20-ingress.yaml

 https://helm.sh/docs/chart_template_guide/getting_started/
 https://helm.sh/docs/chart_template_guide/function_list/

 https://rtfm.co.ua/helm-reusable-chart-named-templates-i-obshhij-chart-dlya-neskolkix-prilozhenij/
https://stackoverflow.com/questions/52742241/dynamically-accessing-values-depending-on-variable-values-in-a-helm-chart
# Templates
https://ru.werf.io/documentation/v1.2/reference/werf_yaml.html
https://codefresh.io/docs/docs/new-helm/helm-best-practices/
https://github.com/Shopify/ingress/blob/master/docs/user-guide/nginx-configuration/annotations.md#server-snippet
https://regex101.com/
