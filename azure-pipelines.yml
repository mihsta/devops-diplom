# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
parameters:
  - name: doPublish
    default: false
    type: boolean
  - name: doAnalyze
    default: true
    type: boolean
    
trigger:
- main
stages:
# Start CI
- stage: CIBuild  # name of the stage, A-Z, a-z, 0-9, and underscore
  displayName: CI_Build  # friendly name to display in the UI 
  variables:
    buildConfiguration: 'Release'


# jobs CI
  jobs: 


 # Build
  - job: Build
    variables:
        NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

    pool:  
      vmImage: windows-2022 #https://docs.microsoft.com/ru-ru/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml
    steps:
    - checkout: self
  # Get pipeline cache    

    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/**/packages.lock.json'
        restoreKeys: |
          nuget | "$(Agent.OS)"
          nuget
        path: $(NUGET_PACKAGES)
        cacheHitVar: CACHE_RESTORED
      displayName: Cache NuGet packages

  # SonarCloudPrepare
    - task: SonarCloudPrepare@1
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Prepare
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'mihsta'
        scannerMode: 'MSBuild'
        projectKey: 'mihsta_devops-diplom'

  # Build solution .NET CORE
      
    - task: DotNetCoreCLI@2
      condition: ne(variables.CACHE_RESTORED, 'true')
      displayName: dotnet publish
      inputs:
        command: 'publish'
        projects: |
          **/*.sln
        arguments: '--configuration $(buildConfiguration)'

  #  Run tests and auto publish test results.
    - task: DotNetCoreCLI@2
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: dotnet test
      inputs:
        command: 'test'
        workingDirectory: diplomapp
        projects: |
          **/*.sln
        arguments: '/p:CollectCoverage=true'

  #  SonarCloudAnalyze
    - task: SonarCloudAnalyze@1
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Analyze
    - task: SonarCloudPublish@1
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Publish
      inputs:
        pollingTimeoutSec: '300'
    - task: sonarcloud-buildbreaker@2
      condition: and(succeeded(), eq('${{ parameters.doAnalyze }}', 'true'))
      displayName: SonarCloud Breaker
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'mihsta'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/diplomapp/frontend/bin/Release/net6.0/publish/wwwroot'
        ArtifactName: 'Frontend_LatestBuild'
        publishLocation: 'Container'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/diplomapp/backend/bin/Release/publish'
        ArtifactName: 'Backend_LatestBuild'
        publishLocation: 'Container'

 # Docker Build
  - job: DockerBuildAndPushBackend
    pool:  
      vmImage: Ubuntu 20.04
    steps:
      - checkout: self
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce' 
      

      - task: Docker@2
        inputs:
          containerRegistry: 'docker_hub'
          repository: 'mihailsta/diplomapp-frontend'
          command: 'buildAndPush'
          Dockerfile: 'Dockerfile.frontend'
          tags: latest
          addPipelineData: false
          addBaseImageData: false
      - task: Docker@2
        inputs:
          containerRegistry: 'docker_hub'
          repository: 'mihailsta/diplomapp-backend'
          command: 'buildAndPush'
          Dockerfile: 'Dockerfile.backend'
          tags: latest
          addPipelineData: false
          addBaseImageData: false



 # Publish projects to specified folder.
  - job: PublishArtifacts
    dependsOn: 
    - Build
    condition: and(succeeded(), eq('${{ parameters.doPublish }}', 'true'))
    steps:
    - checkout: self
    - task: DotNetCoreCLI@2
      displayName: dotnet publish backend --configuration $(buildConfiguration)
      name: PublishBackendProject
      inputs:
        command: publish
        projects: '**/backend/**/*.csproj'
        publishWebProjects: false
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/backend_$(Build.BuildNumber)'
        zipAfterPublish: true

    - task: DotNetCoreCLI@2
      displayName: dotnet publish frontend --configuration $(buildConfiguration)
      name: PublishFrontendProject
      inputs:
        command: publish
        projects: '**/Frontend/**/*.csproj'
        publishWebProjects: false
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/frontend_$(Build.BuildNumber)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/frontend_$(Build.BuildNumber)'
        ArtifactName: 'Frontend_LatestBuild'
        publishLocation: 'Container'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend_$(Build.BuildNumber)'
        ArtifactName: 'Backend_LatestBuild'
        publishLocation: 'Container'


# Stage end CI process
- stage: CI_end
  displayName: CI_end
  jobs:
    - job: